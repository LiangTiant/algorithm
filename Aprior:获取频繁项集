import csv
#得到数据
def get_data():
    director = '宁浩'
    file_name = './' + director + '.csv'
    lists = csv.reader(open(file_name, 'r', encoding='utf-8-sig'))
    data = []
    for names in lists:
        name_new = []
        for name in names:
            # 去掉演员数据中的空格
            name_new.append(name.strip())
        data.append(name_new[1:])
    return data
#得到频繁一项集
'''
    Args:
        data #数据
        support #置信度
    return:
        L1 #频繁一项集
        support_matrix:支持度数组
'''
def find_frequence_1_items(data,support):
    #字典中保存所有演员的出现次数
    C1={}
    #L1保存所有的1频繁项集
    L1=[]
    #存储对应的频率
    support_matrix={}
    # num_item对于数据总数进行计数
    num_item=0
    for _ in data:
        for item in _:
            if item not in C1.keys():
                C1[item]=1
            else:
                C1[item]+=1
        num_item=num_item+1
    for key,value in C1.items():
        if (value/num_item) > support:
            L1.append([key])
            support_matrix[key]=value
    return L1,support_matrix,num_item

#说明组合得到的K+1项集的k子集是否存在于k项频繁子集中
'''
    Args:
        c:k+1项子集
        L:k项频繁集和
    return：
        TRUE:不存在子集在L中，应删除
        False:存在应加入
'''
def has_infrequent_subset(c,L):
    temp=['' for _ in range(len(c)-1)]
    for i in range(len(c)):
        for k in range(i):
            temp[k]=c[k]
        for k in range(i,len(temp)):
            temp[k]=c[k+1]
        if temp not in L:
            return True
    return False
#验证两个数组是否存在包含关系
'''
    Args:
        _:主数组
        item:模式数组
    return：
        False or True
'''
def IN (item,_):
    for m in item:
        if m not in _:
            return False
    return True

#由lk-1项集得到lk项集
'''
    Args:
     LK-1:k-1频繁项集
     support:支持度
     data:数据
     k:说明是几项集
    Return:
     LK: K频繁项集
'''
def apriori_gen(data,num_item,L,k,support):
    #存储需要返回的k+1满足最小支持度的频繁项集
    result=[]
    #存储得到的所有（k + 1）频繁项
    item_k_add_one=[]
    #c存储得到的一个（k+1）频繁项集
    c=[]
    #support_matrix存储所有得到的频繁项集频率
    support_matrix={}
    #count对于得到k+1项集计数
    count={}
    for l1 in L:
         for l2 in L:
             c=[]
             if l1[:k-1]==l2[:k-1] and l1[k-1]<l2[k-1]:
                 for i in  range(len(l1)):
                     c.append(l1[i])
                 c.append(l2[-1])
                 if has_infrequent_subset(c,L)==0:
                     item_k_add_one.append(c)
    for _ in data:
         for item in item_k_add_one:
             if IN(item,_):
                 if str(item) in count.keys():
                     count[str(item)]+=1
                 else:
                     count[str(item)]=1
    for item in item_k_add_one:
        if str(item) in count.keys() and count[str(item)]>(support*num_item):
            result.append(item)
            support_matrix[str(item)]=count[str(item)]
    return result,support_matrix

